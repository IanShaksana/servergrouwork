/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package group_work;

import com.sun.xml.internal.ws.resources.SenderMessages;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;

/**
 *
 * @author Adrian
 */
public class chatclient extends javax.swing.JFrame {

    /**
     * Creates new form chatclient
     */
    static Connection connection;
    static Statement statement;
    static String name = "renz";
    static String name2 = "ian";
    public chatclient() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Chatbox = new javax.swing.JTextArea();
        ClientChat = new javax.swing.JTextField();
        Enter = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        recepient = new javax.swing.JTextField();
        sender = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Chatbox.setEditable(false);
        Chatbox.setColumns(20);
        Chatbox.setRows(5);
        jScrollPane1.setViewportView(Chatbox);

        ClientChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientChatActionPerformed(evt);
            }
        });

        Enter.setText("Enter");
        Enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterActionPerformed(evt);
            }
        });

        jLabel1.setText("Sender :");

        jLabel2.setText("Recepient :");

        sender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                senderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addComponent(ClientChat)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Enter)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sender)
                    .addComponent(recepient, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(recepient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ClientChat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Enter)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterActionPerformed
        // TODO add your handling code here:
        Socket socket;
        try {
            //socket = new Socket("192.168.43.138", 1234);
            socket = new Socket("localhost", 1234);
            PrintStream printStream = new PrintStream(socket.getOutputStream());
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            printStream.println("message");
            String sender = this.sender.getText();
            String recepient = this.recepient.getText() ;
            String message = ClientChat.getText();
            printStream.println(sender);
            printStream.println(recepient);
            printStream.println(message);
            
        } catch (IOException ex) {
            Logger.getLogger(chatclient.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_EnterActionPerformed

    private void ClientChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientChatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClientChatActionPerformed

    private void senderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_senderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_senderActionPerformed

    private static int lol(){
        int numb=0;
        //System.out.println(3);
        try {
            ResultSet num = statement.executeQuery("SELECT ID FROM `message` where sender = `"+name+"` or recepient =`"+name2+"`");
            while (num.next()){
                numb++;
            }
        } catch (SQLException e) {
        }
        System.out.println(numb);
        return numb;
    }
    private static int seekcurrentnumber() {
        int numb=0;
        try {
            //System.out.println("1");
            //Statement statement = connection.createStatement();
            //System.out.println("2");
            //ResultSet num = statement.executeQuery("SELECT ID FROM `message`");
            ResultSet num = statement.executeQuery("SELECT ID FROM `message` where sender = '"+name+"' or recepient ='"+name2+"'");
            //System.out.println("3");
            while (num.next()){
                numb++;
            }
            //return numb;
        } catch (Exception e) {
            //Logger.getLogger(chatclient.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(numb);
        return numb;
    }
    
    private static int seeknewnumber() {
        int numb=0;
        try {
            //Statement statement = connection.createStatement();
            //ResultSet num = statement.executeQuery("SELECT ID FROM `message`");
            ResultSet num = statement.executeQuery("SELECT ID FROM `message` where sender = '"+name+"' or recepient ='"+name2+"'");
            while (num.next()){
                numb++;
            }
            
        } catch (Exception ex) {
            //Logger.getLogger(chatclient.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println(numb);
        return numb;
    }
    
    
    public static void update(){
        try {
            
            System.out.println("updating");
            //Class.forName("com.mysql.jdbc.Driver");
            //Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/group_work","root","lunabeam");
            //Statement statement = connection.createStatement();
            ResultSet res1 = statement.executeQuery("SELECT sender,recepient,message FROM `message` ");
            //ResultSet res1 = statement.executeQuery("SELECT sender,recepient,message FROM `message` where sender = '"+name+"' or recepient ='"+name2+"'");
                //String[] sqlsender;
                //String[] sqlrecepient;
                //String[] sqlmessage;
                
            while (res1.next()){
                Chatbox.append("From : "+res1.getString(1)+"\n");
                Chatbox.append("To : "+res1.getString(2)+"\n");
                Chatbox.append("Message : "+res1.getString(3)+"\n");
                Chatbox.append("\n");
                    
            }
            Chatbox.setCaretPosition(Chatbox.getText().length() - 1);
        } catch (SQLException e) {
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        int oldnumber;
        int newnumber;
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chatclient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chatclient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chatclient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chatclient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        try {
            Class.forName("com.mysql.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/group_work","root","lunabeam");
            statement = connection.createStatement();
            //initComponents();
            //update();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(chatclient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(chatclient.class.getName()).log(Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chatclient().setVisible(true);
                update();
                //lol();
            }
        });
        Runnable background = new Runnable() {
            @Override
            public void run() {
                //lol();
                
                try {
                    //while(true){
                    //    int numb = seekcurrentnumber();
                    //    Thread.sleep(1000);
                    //    int newnumb = seekcurrentnumber();
                        
                        //lol();
                        //oldnumber=seekcurrentnumber();
                        //seekcurrentnumber();
                        //seeknewnumber();
                    //    if(numb<newnumb){
                    //    update();
                    varsity();
                        Thread.sleep(100);
                    //    }
                        
                    //}
                } catch (InterruptedException ex) {
                    Logger.getLogger(chatclient.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            private void varsity() {
                int numb=0;
                
                System.out.println(3);
                try {
                    //Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/group_work","root","lunabeam");
                    //Statement stmt = connection.createStatement();
                    
                    ResultSet num = statement.executeQuery("SELECT ID FROM `message` where sender = '"+name+"' or recepient ='"+name2+"'");
                    System.out.println("done");
                    while (num.next()){
                        numb++;
                    }
                } catch (SQLException ex) { 
                    Logger.getLogger(chatclient.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println(numb);
                //return numb;
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            
        };
        new Thread(background).start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea Chatbox;
    private javax.swing.JTextField ClientChat;
    private javax.swing.JButton Enter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField recepient;
    private javax.swing.JTextField sender;
    // End of variables declaration//GEN-END:variables


}

